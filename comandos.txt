########################## Preparação do Ambiente ##############################
Verificar versão: python --version
python --version
pip --version

Comandos para prompt:
criar diretório: mkdir
caminhar entre diretórios: cd
listar contéudo do diretório: ls ou dir

Atualizando ou instalando PIP:
python -m pip install --upgrade pip
py -m pip install --upgrade pip
pipenv install 
pip install pipenv
pip install virtualenv

Criando Ambiente Virtual: 
py -m venv venv
virtualenv venv

Ativando Ambiente Virtual:
\venv\Scripts\activate
\venv\Scripts\deactivate
linux: \venv\bin\activate
win: \venv\Scripts\activate.bat
win: \venv\Scripts\activate.ps1

Instalando o django
pip install django
pip install django==2.2.6
pip install psycopg2

Verificar pacotes:
pip freeze

Verificar versão:
import django
print(django.get_version())

Criando Requirements: 
pip freeze > requirements.txt

########################## Comandos Django: ##############################

Veiricar comandos django: django-admin help 

Cria projeto dentro de uma pasta com o mesmo nome do projeto:
django-admin startproject alurareceita

Cria o pojeto em uma única pasta:
django-admin startproject alurareceita . 

Iniciar projeto: django-admin startproject <nome_do_projeto>

manage.py: script para gerenciar a aplicação Django.
init.py: arquivo vazio que indica um package ou pacote.
settings.py: arquivo de configuração do projeto.
urls.py: todas as urls do projeto são definidas aqui.
wsgi.py: protocolo que serve http.

Estrutura:
mysite/
    manage.py
    db.sqlite3
    __pycache__/
        __init__.cpython-39.pyc
        __settings__.cpython-39.pyc
        __urls__.cpython-39.pyc
        __wsgi__.cpython-39.pyc
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py

Iniciando um app:
python manage.py startapp nome_do_app
python manage.py startapp aprendendodjango

Estrutura:
myapp/
    migrations/ 
        __init__.py
   __init__.py
   admin.py
   apps.py
   models.py
   tests.py
   views.py 

Configurando o arquivo settings.py:

Na linha 106
de: LANGUAGE_CODE = 'pt-br' para: LANGUAGE_CODE = 'en-us'
de: TIME_ZONE = 'UTC' para: TIME_ZONE = 'America/Sao_Paulo'

Criando Visualizações:
Vamos escrever a primeira visualização. 
Abra o arquivo polls / views.py:

from django.http import HttpResponse

def index(request): 
    return HttpResponse("Hello, world. You're at the polls index.")

Mapeando URL´s no arquivo urls.py:

from django.conf.urls import patterns, url
from polls import views

urlpatterns = patterns('', url(r'^$', views.index, name='index'), )

r’^$’: expressão regular que representa um caminho acessado via navegador, quando solicitado.
views: representa a view que deve ser executada (aquela que foi importada lá em cima, no caso a de perfil).
index: chama a função que queremos executar.

Criando Banco de Dados:
criar banco de dados: python manage.py migrate

Criando um usuário administrador:
python manage.py createsuperuser

Executar o Servidor: python manage.py runserver
python manage.py runserver 0.0.0.0:8000 
python manage.py runserver xxx.xxx.xxx.xx:8000
python manage.py runserver
python manage.py runserver 7000

Verificar se o app executa no endereços:
http://localhost:8000/
http://127.0.0.1:8000/

Torne o pool app modificável no administrador:

from django.contrib import admin
from polls.models import Question, Choice
admin.site.register(Question) admin.site.register(Choice)

Criando app:
python manage.py startapp receitas

Registrando app:
no arquivo apps.py pegar o name = 'receitas' e 
ir em settings para registar em:
INSTALLED_APP = ['receitas',]

OBS: não esquecer da vírgula, se não dá erro.

Criando URLs:
No app receitas criar o arquivo urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
]

Criando Views:
No app receitas alterar o arquivo views.py

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def index(request):
    return HttpResponse('<h1>Receitas</h1>')

Registar url no urls do project:

Sempre que cirar uma url no app registar no project:

from django.contrib import admin
from django.urls import path, include


urlpatterns = [
    path('', include('receitas.urls')),
    path('admin/', admin.site.urls),
]

Criando template:

No app criar um folder template e dentro dele colocar
o arquivo html, 'index.html' 
no arquivo digitar html:5 para criar
a estrutura.

Redenrizar a view pelo template:

from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request,'index.html')

Referenciando templates, estilos e javascript:
No arquivo settings.py na variavel TEMPLATES
atualizar o dicionário na chave 
'DIRS': [os.path.join(BASE_DIR, 'receitas/templates')] 

e também mapear os arquivos statics

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'alurareceita/static')
]

Colar na pasta static os arquivos css e js.

depois dar o comando no cmd: python manage.py collectstatic
o proprio django cópia no app um pasta
static com os arquivo do project/static

No html colocar código python:
{% load static %} acima do doctype,

Colocar no css e js e demais arquivos: 
    <!-- Favicon -->
    <link rel="icon" href="{% static 'img/core-img/favicon.ico' %}">

    <!-- Stylesheet -->
    <link rel="stylesheet" href="{% static 'site.css' %}">

    <a href="index.html"><img src="{% static 'img/core-img/logo.png' %}" alt=""></a>

    <!-- jQuery-2.2.4 js -->
    <script src="{% static 'js/jquery/jquery-2.2.4.min.js' %}"></script>
    <!-- Popper js -->
    <script src="{% static 'js/bootstrap/popper.min.js' %}"></script>
    <!-- Bootstrap js -->
    <script src="{% static 'js/bootstrap/bootstrap.min.js' %}"></script>
    <!-- All Plugins js -->
    <script src="{% static 'js/plugins/plugins.js' %}"></script>
    <!-- Active js -->
    <script src="{% static 'js/active.js' %}"></script>

Para direcionar o link para função:

                <!-- Single Best Receipe Area -->
                <div class="col-12 col-sm-6 col-lg-4">
                    <div class="single-best-receipe-area mb-30">
                        <img src="{% static 'img/bg-img/foto_receita.png' %}" alt="">
                        <div class="receipe-content">
                            <a href="{% url 'receita' %}">
                                <h5>Nome da receita</h5>
                            </a>
                        </div>
                    </div>
                </div>

Criar uma função em Views e Registar a url 
do arquivo receitas.html

Urls:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
    path('index', views.index, name='index'),
    path('receita', views.receita, name='receita')
]

View:
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request,'index.html')

def receita(request):
    return render(request,'receita.html')


Criando base.html para retira código répetido e estender no demais html.

no base html:
{% block content %} {% endblock %}

nos demais:
{% extends 'base.html' %}
{% load static %} 

{% block content %} 
{% endblock %}

Criar htlm para colocar menu e footer e deixar separado dos demais contéudos:
{% load static %} menu.html e footer.html

por em index e receita:
{% include 'partials/menu.html' %} 
{% include 'partials/footer.html' %}

Criando items de forma dinâmica por contexto:

No arquivo view.py passar a variável de contexto:

def index(request):
    return render(request,'index.html', context= {'nome_da_receita':'Lasanha'} )

No html:
<h5>{{ nome_da_receita }}</h5>

Utilizando o for: 

def index(request):
    receitas = {
        1:'Lasanha',
        2:'Sopa de Legumes',
        3:'Sorvete',
        4:'Picadinho',
        5:'Baião de Dois',
        6:'Filé Mingnon'}
    dados = {
        'nome_das_receitas':receitas
    }
    return render(request,'index.html', dados )

No html:
    {% for chave, valor in nome_das_receitas.items %}
    <!-- Single Best Receipe Area -->
    <div class="col-12 col-sm-6 col-lg-4">
        <div class="single-best-receipe-area mb-30">
            <img src="{% static 'img/bg-img/foto_receita.png' %}" alt="">
            <div class="receipe-content">
                <a href="{% url 'receita' %}">
                    <h5>{{valor}}</h5>
                </a>
            </div>
        </div>
    </div>
    {% endfor %}

Criando Banco de Dados:

ativar venv
venv\Scripts\activate

baixar no pacote:
pip install psycopg2
pip install psycopg2-binary

Configurando o banco de dados e conecta-lo no arquivo settings.py em alura receitas.

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'alura_receita',
        'USER':'postgres',
        'PASSWORD':'Mag@2022',
        'HOST':'localhost'
    }
}

Criando o modelo das tabelas:

Em models no app receita acessar o arquivo models.py:

from django.db import models
from datetime import datetime

# Create your models here.
class Receita(models.Model):
    nome_receita = models.CharField(max_length=200) # Campo de texto.
    ingredientes = models.TextField() # Caixa de texto maior.
    modo_preparo = models.TextField()
    tempo_preparo = models.IntegerField()
    rendimento = models.CharField(max_length=100)
    categoria = models.CharField(max_length=100)
    date_receita = models.DateTimeField(default=datetime.now, blank=True)

Transferindo modelo da tabela para o banco:

Criando lista de migração:

usar o promtp com o comando: python manage.py makemigrations
na pasta migrations ficará disponivel o arquivo com a migração.

Realizando a migração com o comando: python manage.py migrate

Depois de executado o comando poderá ser vizualidado no postgresql
as tabelas criadas.

Criando o Admin para acessar o painel:

usar o comando para cirar login e senha de adminitrador: python manage.py createsuperuser
login: alexsandro.ignacio
email: alexsandro.ignacio@wca-ec.com.br
senha:Mag@2022

Fazendo o CRUD Create, Read, Update, Delete a partir do admin:

No arquivo admin.py é preciso registar os modelos para poder adminitrar as querys:

from django.contrib import admin
from.models import Receita

# Register your models here.
admin.site.register(Receita)

Depois acessar a rota localhost/admin
e cadastrar a receita o botão + 

Passar os dados por contexto do BD para o view.py

Importar o modelo:

from django.shortcuts import render
from .models import Receita

# Create your views here.
def index(request):
    receitas = Receita.objects.all()
    dados = {
        'receitas':receitas
    }
    return render(request,'index.html', dados )

def receita(request):
    return render(request,'receita.html')

Atualizar o tempate index:

<section class="best-receipe-area">
    <div class="container">
        <div class="row">
            {% if receitas  %}
            {% for receita in receitas %}
            <!-- Single Best Receipe Area -->
            <div class="col-12 col-sm-6 col-lg-4">
                <div class="single-best-receipe-area mb-30">
                    <img src="{% static 'img/bg-img/foto_receita.png' %}" alt="">
                    <div class="receipe-content">
                        <a href="{% url 'receita' %}">
                            <h5>{{receita.nome_receita}}</h5>
                        </a>
                    </div>
                </div>
            </div>
            {% endfor %}
            {% else %}
            {% endif%}
        </div>
    </div>
</section>

instalar o pylint:
pip install pylint-django

colar no settings.json:

{"python.linting.pylintArgs": [
     "--load-plugins=pylint_django"
],}

Ajustando o Html Receitas para direcionar o link de acordo com id:

no index:
<a href="{% url 'receita' receita.id %}">

no urls:
path('<int:receita_id>', views.receita, name='receita')

views:
from django.shortcuts import render, get_list_or_404, get_object_or_404
from .models import Receita

# Create your views here.
def index(request):
    receitas = Receita.objects.all()
    dados = {
        'receitas':receitas
    }
    return render(request,'index.html', dados )

def receita(request, receita_id):
    receita = get_object_or_404(Receita, pk=receita_id)
    receita_a_exibir = {
        'receita': receita
    }
    return render(request,'receita.html', receita_a_exibir)

Alterar no template menu.html
no nav bar



#########################################################



Material de ajuda:

https://pt.wikipedia.org/wiki/Introspec%C3%A7%C3%A3o_%28computa%C3%A7%C3%A3o%29
https://docs.djangoproject.com/pt-br/2.2/misc/design-philosophies/
https://docs.djangoproject.com/en/2.2/topics/db/models/
https://docs.djangoproject.com/en/2.2/ref/contrib/admin/


---------------------------------------------------------

pip freeze > requirements.txt	
heroku	
pipenv check	
heroku login	
cltr c devolve o prompt	
heroku create	
git push heroku master	
git push heroku HEAD:master	
heroku ps:scale web=1	
heroku open	
heroku apps	
heroku apps:destroy "nome do app sem aspas"	
heroku apps:destroy arcene-40228	
heroku buildpacks:clear 	
heroku logs --tail	
heroku logs  > herokulogs	
heroku apps:rename crud-cadastro-alunos --app boiling-tundra-56022 	
heroku apps:rename maapsystem_sorvetunes --app fathomless-reaches-29620	
heroku git:remote -a maapsystem-sorvetunes	
git add .	
git commit -am "make it better"	
git push heroku master

## Admin Link e filtros

No admin.py criar a class:

class ListandoReceitas(admin.ModelAdmin):
    list_display = ('id', 'nome_receita', 'categoria', 'tempo_preparo') # Cria uma nova vizualização
    list_display_links = ('id', 'nome_receita') # gera link no texto para página de update.
    search_fields = ('nome_receita',) # cria campo de busca.
    list_filter =  ('categoria',) # Cria campo de filtro.
    list_per_page = 2

# Register your models here.
admin.site.register(Receita, ListandoReceitas)

## Criando APP Pessoas: 
python manage.py startapp pessoas

ir → seetins.py alurareceita

Registrar o app: 
INSTALLED_APPS = [
    'receitas',
    'pessoas',

ir → models.py pessoas

Criar modelo: 

from django.db import models
from datetime import datetime

# Create your models here.
class Pessoa(models.Model):
    nome = models.CharField(max_length=200)
    email = models.CharField(max_length=200)

ir → admin.py pessoas

Registrar no admin

from django.contrib import admin
from.models import Pessoa

admin.site.register(Pessoa)

Migrar a tabela para o banco: 
python manage.py makemigrations
python manage.py migrate

## Criando filtros: 

from django.contrib import admin
from.models import Pessoa

class ListandoPessoas(admin.ModelAdmin):
    list_display = ('id', 'nome', 'email')
    list_display_links = ('id', 'nome', 'email')
    search_fields = ('nome',)
    list_per_page = 2

admin.site.register(Pessoa, ListandoPessoas)

# Query SQL para deletar:

SELECT * FROM public.receitas_receita;
TRUNCATE TABLE receitas_receita RESTART IDENTITY;;
SELECT * FROM public.receitas_receita;

# Criando FK no models receita: 

from pessoas.models import Pessoa

# Create your models here.
class Receita(models.Model):
    pessoa = models.ForeignKey(Pessoa, on_delete=models.CASCADE)

Migrar a tabela para o banco: 
python manage.py makemigrations
1 → ''
python manage.py migrate

# Alterando vizualização dalista de ForeignKey

ir → models.py pessoas

from django.db import models
from datetime import datetime

# Create your models here.
class Pessoa(models.Model):
    nome = models.CharField(max_length=200)
    email = models.CharField(max_length=200)
    def __str__(self):
        return self.nome

# alterar o template para exibir o nome de pessoa: 

Como a pessoa já esta no models de receita o views.py não precisa de alteração.

Flag True para criar uma edição:

No arquivo models.py receita
publicada = models.BooleanField(default=False)

Para subir no banco:
python manage.py makemigrations
python manage.py migrate

ir → views.py para cria lógica de exibição: 

Incluir o filter
# Create your views here.
def index(request):
    receitas = Receita.objects.filter(publicada=True)

Incluír no campo do admin o botão publicar:

Ir → admin.py

class ListandoReceitas(admin.ModelAdmin):
    list_display = ('id', 'nome_receita', 'categoria', 'tempo_preparo', 'publicada')
    list_display_links = ('id', 'nome_receita')
    search_fields = ('nome_receita',)
    list_filter =  ('categoria',)
    list_per_page = 5

Para possibilitar edição no memu:

list_editable = ('publicada',)

Para alterar ordem de exibição de items no index:

Ir → views.py
alterara variável: 
receitas = Receita.objects.order_by('-date_receita').filter(publicada=True)

Criando campo para armazenar imagem.
foto_receita = models.ImageField(upload_to = 'foto/%d/%m/%Y/', blank=True) 

Valor salvo no banco: foto/24/08/2022/bolo-chocolate.jpg

Ir → settings.py
criar uma rota para mídia

# Media
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

No banco de dados é salvo o caminho para acessar a imagem e não a imagem.

Antes intalar o pacote pillow para trabalhar com imagens:
pip install pillow
caso necessario atualizar o pip: 
pip install --upgrade pip

→ gera a migração

→ criar a url no urls.py do alurareceitas

urlpatterns = [
    path('', include('receitas.urls')),
    path('admin/', admin.site.urls),
] + static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT )

Ajustar o index para receber a foto:

Ir para index.html